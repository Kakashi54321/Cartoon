************ O(2^n) **********
******************************
int knapsack(int res, int a[], int w[], int n){
    if(n==0 || res==0)  return 0;
    if(w[n-1]>res){
        return knapsack(res, a, w, n-1);
    }else{
        return max(a[n-1]+knapsack(res-w[n-1], a, w, n-1), knapsack(res, a, w, n-1));
    }
}




************ O(nW) **********
******************************
int knapsack(int W, int wt[], int val[], int n)
{
    int i,w;
    int k[n+1][W+1];
    for(int i=0;i<=n;i++)
    {
        for(int w=0;w<=W;w++)
        {
            if(i==0||w==0)
            {
                k[i][w]=0;
            }
            else if(wt[i-1]<=w)
            {
                k[i][w]=max(val[i-1]+k[i-1][w-wt[i-1]],k[i-1][w]);
            }
            else
            {
                k[i][w]=k[i-1][w];
            }
        }
    }
    return k[n][W];
}
int main()
 {
	//code
	int t;
	cin>>t;
	while(t--)
	{
	    int n;
	    int W;
	    cin>>n>>W;
	    int val[n],wt[n];
	    for(int i=0;i<n;i++)
	    {
	        cin>>val[i];
	    }
	     for(int i=0;i<n;i++)
	    {
	        cin>>wt[i];
	    }
	    cout<<knapsack(W,wt,val,n)<<endl;
	}
	return 0;
}
