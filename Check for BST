bool check(Node* node, int a, int b){
    if(node == NULL)    return 1;
    if((node -> data < a) || (node -> data > b))    return 0;
    return ((check(node->left, a, node->data-1)) && (check(node->right, node->data+1, b)));
}

bool isBST(Node* root) {
    // Your code here
    return check(root, INT_MIN, INT_MAX);
}















if (node == NULL)  
    return 1;  
      
  /* false if left is > than node */
  if (node->left != NULL && node->left->data > node->data)  
    return 0;  
      
  /* false if right is < than node */
  if (node->right != NULL && node->right->data < node->data)  
    return 0;  
    
  /* false if, recursively, the left or right is not a BST */
  if (!isBST(node->left) || !isBST(node->right))  
    return 0;  
      
  /* passing all that, it's a BST */
  return 1;  
