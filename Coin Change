To count the total number of solutions, we can divide all set solutions into two sets.
1) Solutions that do not contain mth coin (or Sm).
2) Solutions that contain at least one Sm.
Let count(S[], m, n) be the function to count the number of solutions, then it can be written as sum of count(S[], m-1, n) and count(S[], m, n-Sm).


int count( int S[], int m, int n ) 
{ 
    // If n is 0 then there is 1 solution  
    // (do not include any coin) 
    if (n == 0) 
        return 1; 
      
    // If n is less than 0 then no  
    // solution exists 
    if (n < 0) 
        return 0; 
  
    // If there are no coins and n  
    // is greater than 0, then no 
    // solution exist 
    if (m <=0 && n >= 1) 
        return 0; 
  
    // count is sum of solutions (i)  
    // including S[m-1] (ii) excluding S[m-1] 
    return count( S, m - 1, n ) + count( S, m, n-S[m-1] ); 
} 
  
  *****************************  *****************************
  
  int count( int S[], int m, int n ) 
{ 
    // table[i] will be storing the number of solutions for 
    // value i. We need n+1 rows as the table is constructed 
    // in bottom up manner using the base case (n = 0) 
    int table[n+1]; 
  
    // Initialize all table values as 0 
    memset(table, 0, sizeof(table)); 
  
    // Base case (If given value is 0) 
    table[0] = 1; 
  
    // Pick all coins one by one and update the table[] values 
    // after the index greater than or equal to the value of the 
    // picked coin 
    for(int i=0; i<m; i++) 
        for(int j=S[i]; j<=n; j++) 
            table[j] += table[j-S[i]]; 
  
    return table[n]; 
} 







int count( int S[], int m, int n )  
{  
     //we need a two dimensional matrix to store the result 
    int table[m+1][n+1];  
    
    // Initialize all table values as 0  
    memset(table, 0, sizeof(table));  
    
    // Base case (If given value is 0)  
    for(int i=0;i<m;i++) 
   {table[0][i] = 1;  
   } 
      
    for(int i=1;i<=m;i++) 
      { 
            
          for(int j=1;j<=n;j++) 
          { 
              if(S[i-1]>j) 
              { 
                  table[i][j]=table[i-1][j]; 
                    
              } 
                
              else
              { 
                  table[i][j]=table[i-1][j]+table[i][j-(i-1)]; 
              } 
                
          } 
      } 
    return table[m][n];  
} 


O(mn)
Sapce: O(n)
  
  
  
  
  
  
