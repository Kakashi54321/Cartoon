{
#include<bits/stdc++.h>
using namespace std;
//Position this line where user code will be pasted.
int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        int V, E;
        cin>>V>>E;
        
        // array of vectors to represent graph
        vector<int> adj[V];
        
        int u, v;
        for(int i=0;i<E;i++)
        {
            cin>>u>>v;
            
            // adding edge to the graph
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        cout << isCyclic(adj, V)<<endl;
    }
}

}
/*This is a function problem.You only need to complete the function given below*/
/* This function is used to detect a cycle in undirected graph
*  adj[]: array of vectors to represent graph
*  V: number of vertices
*/
bool DFS(int s, vector<int> adj[], bool vis[], int S)
{
    vis[s]=1;
    vector<int>::iterator it;
    for(it=adj[s].begin();it!=adj[s].end();it++)
    {
        if(!vis[*it]){
            if(DFS(*it,adj,vis,s)){
                return 1;}
        }
        else if(S != *it)
        {  
           return 1;
        }
        
    }
    return 0;
}

bool isCyclic(vector<int> adj[], int V)
{
   // Your code here
   bool vis[V];
    for(int i = 0;i<V;i++)
        vis[i]=0;
    for(int i = 0;i<V;i++)
    {
        if(vis[i]==0){
            if(DFS(i,adj,vis,-1)){
            return 1;
    }}}
    return 0;
}
