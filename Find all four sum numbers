Hashing Based Solution : O(n2Logn)

Store sums of all pairs in a hash table
Traverse through all pairs again and search for X â€“ (current pair sum) in the hash table.
If a pair is found with the required sum, then make sure that all elements are distinct array elements and an element is not considered more than once.




/ The function finds four elements with given sum X 
void findFourElements (int arr[], int n, int X) 
{ 
    // Store sums of all pairs in a hash table 
    unordered_map<int, pair<int, int>> mp; 
    for (int i = 0; i < n-1; i++) 
        for (int j = i+1; j < n; j++) 
            mp[arr[i] + arr[j]] = {i, j}; 
  
    // Traverse through all pairs and search 
    // for X - (current pair sum).     
    for (int i = 0; i < n-1; i++) 
    { 
        for (int j = i+1; j < n; j++) 
        { 
            int sum = arr[i] + arr[j]; 
  
            // If X - sum is present in hash table,             
            if (mp.find(X - sum) != mp.end()) 
            { 
  
                // Making sure that all elements are 
                // distinct array elements and an element 
                // is not considered more than once. 
                pair<int, int> p = mp[X - sum]; 
                if (p.first != i && p.first != j && 
                        p.second != i && p.second != j) 
                { 
                    cout << arr[i] << ", " << arr[j] << ", "
                         << arr[p.first] << ", "
                         << arr[p.second]; 
                    return; 
                } 
            } 
        } 
    } 
} 

















int a[100], n, k, l, flag=0, swap, c, d;
	    cin>>n>>k;
	    for(int i=0;i<n;i++)
	        cin>>a[i];
	    for (c = 0 ; c < ( n - 1 ); c++)
          {
            for (d = 0 ; d < n - c - 1; d++)
            {
              if (a[d] > a[d+1])
              {
                swap = a[d];
                a[d] = a[d+1];
                a[d+1] = swap;
              }
            }
          }
	    l=0;
	    for(int p=0;p<n-3;p++)
	    {
	        if(p>0 && a[p]==a[p-1])
	            continue;
	        for(int q=p+1;q<n-2;q++)
	        {
    	        if(q>p+1 && a[q]==a[q-1])
    	         continue;
    	        for(int r=q+1;r<n-1;r++)
    	        {
    	            if(r>q+1 && a[r]==a[r-1])
    	             continue;
    	            for(int s=r+1;s<n;s++)
    	            {
    	                if(s>r+1 && a[s]==a[s-1])
    	                   continue;
    	                else
            	            {
            	                l=a[p]+a[q]+a[r]+a[s];
            	                if(l==k)
            	                {
            	                    cout<<a[p]<<" "<<a[q]<<" "<<a[r]<<" "<<a[s]<<" "<<"$";
            	                    flag++;
            	                }
            	            }
    	            }
    	           
    	        }
    	        
	        }
	    }
	    if(flag==0)
	        cout<<-1;
	    cout<<endl;
