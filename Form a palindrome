#include<bits/stdc++.h>
using namespace std;


*******************LONGEST COMMON SUBSEQUENCE APPROACH**********
******************************************************************
long long lcs(string s1, string s2){
	    
	    long long len1=s1.length();
	    long long len2=s2.length();
	    long long dp[len1+1][len2+1];
	    for(long long i=0;i<len1+1;i++){
	        dp[i][0]=0;
	    }
	    for(long long i=0;i<len2+1;i++){
	        dp[0][i]=0;
	    }
	    
	    for(long long i=1;i<len1+1;i++){
	        for(long long j=1;j<len2+1;j++){
	            if(s1[i-1]==s2[j-1]){
	                dp[i][j]=1+dp[i-1][j-1];
	            }
	            else{
	                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
	            }
	        }
	    }
	    return dp[len1][len2];
}
int main()
 {
	long long t;
	cin >> t;
	while(t--){
	    string s1;
	    cin >> s1;
	    string s2="";
	    for(long long i=s1.length()-1;i>=0;i--){
	        s2=s2+s1[i];
	    }
	    long long x=lcs(s1,s2);
	    cout << s1.length()-x << endl;
	    
	}
	return 0;
}




