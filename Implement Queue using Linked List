void MyQueue:: push(int x)
{
        // Your Code
        QueueNode *temp = new QueueNode(x);
// temp -> data = x;
// temp -> next = NULL;
if(front == NULL)
{
front = temp;
rear = temp;
}
else
{
rear -> next = temp;
rear = temp;
}
}
/*The method pop which return the element
  poped out of the queue*/
int MyQueue :: pop()
{
        // Your Code  
        int temp;
if(front == NULL)
return -1;
temp = front -> data;
if(front == rear)
front = rear = NULL;
else
front = front -> next;
return temp;
}







// The function to add a key k to q 
void enQueue(Queue* q, int k) 
{ 
    // Create a new LL node 
    QNode* temp = newNode(k); 
  
    // If queue is empty, then 
    // new node is front and rear both 
    if (q->rear == NULL) { 
        q->front = q->rear = temp; 
        return; 
    } 
  
    // Add the new node at 
    // the end of queue and change rear 
    q->rear->next = temp; 
    q->rear = temp; 
} 
  
// Function to remove 
// a key from given queue q 
QNode* deQueue(Queue* q) 
{ 
    // If queue is empty, return NULL. 
    if (q->front == NULL) 
        return NULL; 
  
    // Store previous front and 
    // move front one node ahead 
    QNode* temp = q->front; 
    delete(temp); 
  
    q->front = q->front->next; 
  
    // If front becomes NULL, then 
    // change rear also as NULL 
    if (q->front == NULL) 
        q->rear = NULL; 
    return temp; 
} 
  
