{
#include<bits/stdc++.h>
using namespace std;
void dijkstra(vector<vector<int>> , int ,int );
int main()
{
    int t;
    int V;
    cin>>t;
    while(t--){
        cin>>V;
        
        vector<vector<int>> g(V);
        
        for(int i = 0;i<V;i++){
            vector<int> temp(V);
            g[i] = temp;
        }
        
        for(int i=0;i<V;i++)
        {
      	    for(int j=0;j<V;j++)
      	    {
      		    cin>>g[i][j];
      	    }
        }
        
        int s;
        cin>>s;
        
        dijkstra(g, s, V);
        cout<<endl;
       }
        return 0;
}
}
/*This is a function problem.You only need to complete the function given below*/
/*  Function to implement Dijkstra
*   graph: vector of vectors which represents the graph
*   src: source vertex to start traversing graph with
*   V: number of vertices
*/
int getMin(bool vset[],int dist[],int V)
{
    int index,Min=INT_MAX;
    for(int i=0;i<V;i++)
    {
        if(vset[i]==false && dist[i]<Min)
        {
            Min=dist[i];
            index=i;
        }
    }
    return index;
}

void dijkstra(vector<vector<int>> graph, int src, int V)
{
    // Your code here
    bool vset[V];
   int dist[V];
   for(int i=0;i<V;i++)
   {
       vset[i]=false;
       dist[i]=INT_MAX;
   }
   dist[src]=0;
   for(int i=0;i<V-1;i++)
   {
       int u=getMin(vset,dist,V);
       vset[u]=true;
       for(int j=0;j<V;j++)
       {
           if(graph[u][j] && vset[j]==false && dist[u]!=INT_MAX && dist[u]+graph[u][j]<dist[j])
           {
               dist[j]=dist[u]+graph[u][j];
           }
       }
   }
   for(int i=0;i<V;i++)
    cout<<dist[i]<<" ";
}
