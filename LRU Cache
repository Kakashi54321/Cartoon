class LRUCache
{
public:
    LRUCache(int );
    int get(int );
    void set(int , int );
};*/
/*You are required to complete below methods */
/*Inititalize an LRU cache with size N */
map<int,int> mp;
deque<int> temp;
int no;
LRUCache::LRUCache(int capacity)
{
  mp.clear();
  temp.clear();
  no = capacity;
}
/*Sets the key x with value y in the LRU cache */
void LRUCache::set(int key, int value) 
{
      if (mp.find(key)==mp.end())
   {
       if (temp.size()==no)
       {
        int k = temp.back();
        temp.pop_back();
        mp.erase(k); 
       }
   }
    else 
    {
        deque<int> :: iterator itr = temp.begin();
        while (*itr!=key) itr++;
        temp.erase(itr);
        mp.erase(key);
    }
    temp.push_front(key);
    mp[key] = value;
}
/*Returns the value of the key x if 
present else returns -1 */
int LRUCache::get(int key)
{
  if (mp.find(key)==mp.end()) return -1;
  else
  {
      deque<int> :: iterator itr = temp.begin();
      while (*itr!=key) itr++;
      temp.erase(itr);
      temp.push_front(key);
      return mp[key];
  }
}














#include <bits/stdc++.h> 
using namespace std; 
  
class LRUCache { 
    // store keys of cache 
    list<int> dq; 
  
    // store references of key in cache 
    unordered_map<int, list<int>::iterator> ma; 
    int csize; // maximum capacity of cache 
  
public: 
    LRUCache(int); 
    void refer(int); 
    void display(); 
}; 
  
// Declare the size 
LRUCache::LRUCache(int n) 
{ 
    csize = n; 
} 
  
// Refers key x with in the LRU cache 
void LRUCache::refer(int x) 
{ 
    // not present in cache 
    if (ma.find(x) == ma.end()) { 
        // cache is full 
        if (dq.size() == csize) { 
            // delete least recently used element 
            int last = dq.back(); 
  
            // Pops the last elmeent 
            dq.pop_back(); 
  
            // Erase the last 
            ma.erase(last); 
        } 
    } 
  
    // present in cache 
    else
        dq.erase(ma[x]); 
  
    // update reference 
    dq.push_front(x); 
    ma[x] = dq.begin(); 
} 
  
// Function to display contents of cache 
void LRUCache::display() 
{ 
  
    // Iterate in the deque and print 
    // all the elements in it 
    for (auto it = dq.begin(); it != dq.end(); 
         it++) 
        cout << (*it) << " "; 
  
    cout << endl; 
} 
  
// Driver Code 
int main() 
{ 
    LRUCache ca(4); 
  
    ca.refer(1); 
    ca.refer(2); 
    ca.refer(3); 
    ca.refer(1); 
    ca.refer(4); 
    ca.refer(5); 
    ca.display(); 
  
    return 0; 
} 
