/*This is a function problem.You only need to complete the function given below*/
/* A binary tree node has data, pointer to left child
   and a pointer to right child  
struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
}; */
int height(Node *node){
    if(node==NULL)  return 0;
    return 1 + max(height(node->left), height(node->right));
}

void printLevel(Node *root, int level, int flag){
    if(root==NULL)  return;
    else if(level==1){
        cout<<root->data<<" ";
    }
    else if(level >1){
    if(flag){
        printLevel(root->left, level-1, flag);
        printLevel(root->right, level-1, flag);
    }
    else{
        printLevel(root->right, level-1, flag);
        printLevel(root->left, level-1, flag);
    }
    }
}

void printSpiral(Node *root)
{
    //Your code here
    int h = height(root);
    int flag = 0;
    
    for(int i=1; i<=h; i++){
        printLevel(root, i, flag);
        flag = !flag;
    }
}
