#include <bits/stdc++.h>
using namespace std;
// A Linked List node
struct Node
{
	int data;
	Node* next;
	
	Node(int x){
	    data = x;
	    next = NULL;
	}
	
};
Node* mergeKLists(Node* arr[], int N);
/* Function to print nodes in a given linked list */
void printList(Node* node)
{
	while (node != NULL)
	{
		printf("%d ", node->data);
		node = node->next;
	}
	cout<<endl;
}
// Driver program to test above functions
int main()
{
   int t;
   cin>>t;
   while(t--)
   {
	   int N;
	   cin>>N;
       struct Node *arr[N];
       for(int j=0;j<N;j++)
        {
           int n;
           cin>>n;
           int x;
           cin>>x;
           arr[j]=new Node(x);
           Node *curr = arr[j];
           n--;
           for(int i=0;i<n;i++)
           {
               cin>>x;
               Node *temp = new Node(x);
               curr->next =temp;
               curr=temp;
           }
   		}
   		Node *res = mergeKLists(arr,N);
		printList(res);
   }
	return 0;
}

}
/*This is a function problem.You only need to complete the function given below*/
/*Linked list Node structure
struct Node
{
	int data;
	Node* next;
	
	Node(int x){
	    data = x;
	    next = NULL;
	}
	
};
*/ 
Node *merge(Node *p,Node *q)
{
    if(p==NULL)
    return q;
    if(q==NULL)
    return p;
    Node *head;
    if(p->data<q->data)
    {
        head=p;
        head->next=merge(p->next,q);
    }
    else
    {
        head=q;
        head->next=merge(q->next,p);
    }
    return head;
}
/* arr[] is an array of pointers to heads of linked lists
  and N is size of arr[]  */
Node * mergeKLists(Node *arr[], int N)
{
       // Your code here
       int n=N;
    if(N<2)
    {
        if(n==1)
        return arr[0];
        else 
        return NULL;
    }
    Node *head=merge(arr[0],arr[1]);
    for(int i=2;i<n;i++)
    {
        head=merge(head,arr[i]);
    }
    return head;
}
